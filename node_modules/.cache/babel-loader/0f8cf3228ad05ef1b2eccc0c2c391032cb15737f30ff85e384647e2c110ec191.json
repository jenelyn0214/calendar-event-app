{"ast":null,"code":"var _jsxFileName = \"/Users/gylou/Documents/projects/calendar-event-app/src/screen/Calendar.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Calendar as BigCalendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport { fetchEvents, createEvent, deleteEvent } from '../api/event';\nimport Modal from '../components/Modal';\nimport CreateEventModal from '../components/CreateEventModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst localizer = momentLocalizer(moment);\nconst Calendar = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [selectedEvent, setSelectedEvent] = useState(null); // For selected event\n  const [showModal, setShowModal] = useState(false);\n  const [showCreateModal, setShowCreateModal] = useState(false); // For create modal\n  const [slotInfo, setSlotInfo] = useState(null); // Slot info for creating events\n\n  const loadEvents = () => {\n    fetchEvents().then(data => {\n      setEvents(prev => [...data]);\n    });\n  };\n  useEffect(() => {\n    loadEvents();\n  }, []);\n  const handleSelectSlot = slotInfo => {\n    setSlotInfo(slotInfo);\n    setShowCreateModal(true); // Show modal when a time slot is clicked\n  };\n\n  // Handle event selection for viewing and deleting\n  const handleSelectEvent = event => {\n    setSelectedEvent(event);\n    setShowModal(true); // Show modal when an event is clicked\n  };\n\n  // Handle event deletion inside modal\n  const handleDeleteEvent = async eventId => {\n    await deleteEvent(eventId);\n    setShowModal(false); // Close modal after deletion\n    loadEvents(); // Reload events after deleting\n  };\n\n  // Handle creating a new event from the modal\n  const handleCreateEvent = async eventData => {\n    await createEvent(eventData);\n    loadEvents(); // Reload events after creating a new one\n    setShowCreateModal(false); // Close the modal after creation\n  };\n  console.log('zzzz', events);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(BigCalendar, {\n      localizer: localizer,\n      events: events,\n      startAccessor: \"start\",\n      endAccessor: \"end\",\n      selectable: true,\n      onSelectSlot: handleSelectSlot,\n      onSelectEvent: handleSelectEvent,\n      style: {\n        height: 500\n      }\n    }, events.length + '-' + Date.now(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showModal,\n      event: selectedEvent,\n      onClose: () => setShowModal(false),\n      onDelete: handleDeleteEvent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CreateEventModal, {\n      show: showCreateModal,\n      onClose: () => setShowCreateModal(false),\n      onCreate: handleCreateEvent,\n      slotInfo: slotInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(Calendar, \"6RLVQgrn0A8UJKjUZRyh91/6JzI=\");\n_c = Calendar;\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","BigCalendar","momentLocalizer","moment","fetchEvents","createEvent","deleteEvent","Modal","CreateEventModal","jsxDEV","_jsxDEV","localizer","_s","events","setEvents","selectedEvent","setSelectedEvent","showModal","setShowModal","showCreateModal","setShowCreateModal","slotInfo","setSlotInfo","loadEvents","then","data","prev","handleSelectSlot","handleSelectEvent","event","handleDeleteEvent","eventId","handleCreateEvent","eventData","console","log","children","startAccessor","endAccessor","selectable","onSelectSlot","onSelectEvent","style","height","length","Date","now","fileName","_jsxFileName","lineNumber","columnNumber","show","onClose","onDelete","onCreate","_c","$RefreshReg$"],"sources":["/Users/gylou/Documents/projects/calendar-event-app/src/screen/Calendar.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Calendar as BigCalendar, momentLocalizer, Event } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\n\nimport { CalendarEvent } from '../types';\nimport { fetchEvents,createEvent, deleteEvent } from '../api/event';\nimport Modal from '../components/Modal';\nimport CreateEventModal from '../components/CreateEventModal';\n\nconst localizer = momentLocalizer(moment);\n\n\nconst Calendar: React.FC = () => {\n    const [events, setEvents] = useState<CalendarEvent[]>([]);\n    const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null); // For selected event\n    const [showModal, setShowModal] = useState<boolean>(false);\n    const [showCreateModal, setShowCreateModal] = useState<boolean>(false); // For create modal\n    const [slotInfo, setSlotInfo] = useState<{ start: Date; end: Date } | null>(null); // Slot info for creating events\n\n  \n    \n    \n    const loadEvents = () => {\n        fetchEvents().then((data: CalendarEvent[]) => {\n            setEvents((prev)=>[...data])\n        });\n    };\n\n  useEffect(() => {\n    loadEvents()\n  }, []);\n  \n  const handleSelectSlot = (slotInfo: { start: Date; end: Date }) => {\n    setSlotInfo(slotInfo);\n    setShowCreateModal(true); // Show modal when a time slot is clicked\n  };\n\n  // Handle event selection for viewing and deleting\n  const handleSelectEvent = (event: CalendarEvent) => {\n    setSelectedEvent(event);\n    setShowModal(true); // Show modal when an event is clicked\n  };\n\n  // Handle event deletion inside modal\n  const handleDeleteEvent = async (eventId: string) => {\n    await deleteEvent(eventId);\n    setShowModal(false); // Close modal after deletion\n    loadEvents(); // Reload events after deleting\n  };\n\n  // Handle creating a new event from the modal\n  const handleCreateEvent = async (eventData: { title: string; start: Date; end: Date; description: string }) => {\n    await createEvent(eventData);\n    loadEvents(); // Reload events after creating a new one\n    setShowCreateModal(false); // Close the modal after creation\n  };\n\n  console.log('zzzz',events)\n\n  return (\n    <div>\n        <BigCalendar\n            key={events.length+'-'+Date.now()}\n            localizer={localizer}\n            events={events}\n            startAccessor=\"start\"\n            endAccessor=\"end\"\n            selectable\n            onSelectSlot={handleSelectSlot}\n            onSelectEvent={handleSelectEvent}\n            style={{ height: 500 }}\n        />\n\n      <Modal \n        show={showModal} \n        event={selectedEvent} \n        onClose={() => setShowModal(false)} \n        onDelete={handleDeleteEvent} \n      />\n      <CreateEventModal\n        show={showCreateModal}\n        onClose={() => setShowCreateModal(false)}\n        onCreate={handleCreateEvent}\n        slotInfo={slotInfo}\n      />\n    </div>\n  );\n};\n\nexport default Calendar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}