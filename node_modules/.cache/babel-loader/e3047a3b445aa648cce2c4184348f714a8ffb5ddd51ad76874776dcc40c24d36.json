{"ast":null,"code":"var _jsxFileName = \"/Users/gylou/Documents/projects/calendar-event-app/src/screen/CalendarPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Calendar as BigCalendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport { createEvent, deleteEvent, getEvents } from '../api/event';\nimport ViewEventModal from '../components/ViewEventModal';\nimport CreateEventModal from '../components/CreateEventModal';\nimport { useDispatch } from 'react-redux';\nimport { logoutUser } from '../actions/authActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst localizer = momentLocalizer(moment);\nconst CalendarPage = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [events, setEvents] = useState([]);\n  const [selectedEvent, setSelectedEvent] = useState(null); // For selected event\n  const [showModal, setShowModal] = useState(false);\n  const [showCreateModal, setShowCreateModal] = useState(false); // For create modal\n  const [slotInfo, setSlotInfo] = useState(null); // Slot info for creating events\n\n  const loadEvents = async () => {\n    // fetchEvents().then((data: CalendarEvent[]) => {\n    //     setEvents((prev)=>[...data])\n    // });\n\n    try {\n      const fetchedEvents = await getEvents();\n      console.log('fetchedEvents', fetchedEvents);\n      const mappedEvents = fetchedEvents.map(fetchedEvent => ({\n        ...fetchedEvent,\n        start_time: new Date(fetchedEvent.start),\n        end_time: new Date(fetchedEvent.end)\n      }));\n      console.log('mappedEvents', mappedEvents);\n      setEvents(() => mappedEvents);\n    } catch (error) {\n      console.log('error', error);\n    }\n  };\n  useEffect(() => {\n    loadEvents();\n  }, []);\n  const handleSelectSlot = slotInfo => {\n    setSlotInfo(slotInfo);\n    setShowCreateModal(true); // Show modal when a time slot is clicked\n  };\n\n  // Handle event selection for viewing and deleting\n  const handleSelectEvent = event => {\n    setSelectedEvent(event);\n    setShowModal(true); // Show modal when an event is clicked\n  };\n\n  // Handle event deletion inside modal\n  const handleDeleteEvent = async eventId => {\n    await deleteEvent(eventId);\n    setShowModal(false); // Close modal after deletion\n    loadEvents(); // Reload events after deleting\n  };\n\n  // Handle creating a new event from the modal\n  const handleCreateEvent = async eventData => {\n    await createEvent(eventData);\n    loadEvents(); // Reload events after creating a new one\n    setShowCreateModal(false); // Close the modal after creation\n  };\n  console.log('zzzz', events);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        dispatch(logoutUser());\n      },\n      children: \"Logout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BigCalendar, {\n      localizer: localizer,\n      events: events,\n      startAccessor: \"start\",\n      endAccessor: \"end\",\n      selectable: true,\n      onSelectSlot: handleSelectSlot,\n      onSelectEvent: handleSelectEvent,\n      style: {\n        height: 500\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ViewEventModal, {\n      show: showModal,\n      event: selectedEvent,\n      onClose: () => setShowModal(false),\n      onDelete: handleDeleteEvent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CreateEventModal, {\n      show: showCreateModal,\n      onClose: () => setShowCreateModal(false),\n      onCreate: handleCreateEvent,\n      slotInfo: slotInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(CalendarPage, \"A5JynmaTAi9J7GN2anc1gi9/5vY=\", false, function () {\n  return [useDispatch];\n});\n_c = CalendarPage;\nexport default CalendarPage;\nvar _c;\n$RefreshReg$(_c, \"CalendarPage\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","BigCalendar","momentLocalizer","moment","createEvent","deleteEvent","getEvents","ViewEventModal","CreateEventModal","useDispatch","logoutUser","jsxDEV","_jsxDEV","localizer","CalendarPage","_s","dispatch","events","setEvents","selectedEvent","setSelectedEvent","showModal","setShowModal","showCreateModal","setShowCreateModal","slotInfo","setSlotInfo","loadEvents","fetchedEvents","console","log","mappedEvents","map","fetchedEvent","start_time","Date","start","end_time","end","error","handleSelectSlot","handleSelectEvent","event","handleDeleteEvent","eventId","handleCreateEvent","eventData","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","startAccessor","endAccessor","selectable","onSelectSlot","onSelectEvent","style","height","show","onClose","onDelete","onCreate","_c","$RefreshReg$"],"sources":["/Users/gylou/Documents/projects/calendar-event-app/src/screen/CalendarPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Calendar as BigCalendar, momentLocalizer, Event } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\n\nimport { CalendarEvent } from '../types';\nimport { fetchEvents,createEvent, deleteEvent, getEvents } from '../api/event';\nimport ViewEventModal from '../components/ViewEventModal';\nimport CreateEventModal from '../components/CreateEventModal';\nimport { useDispatch } from 'react-redux';\nimport { AppDispatch } from '../store';\nimport { logoutUser } from '../actions/authActions';\n\nconst localizer = momentLocalizer(moment);\n\n\nconst CalendarPage: React.FC = () => {\n\n  const dispatch = useDispatch<AppDispatch>();\n    const [events, setEvents] = useState<CalendarEvent[]>([]);\n    const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null); // For selected event\n    const [showModal, setShowModal] = useState<boolean>(false);\n    const [showCreateModal, setShowCreateModal] = useState<boolean>(false); // For create modal\n    const [slotInfo, setSlotInfo] = useState<{ start: Date; end: Date } | null>(null); // Slot info for creating events\n\n    const loadEvents = async () => {\n        // fetchEvents().then((data: CalendarEvent[]) => {\n        //     setEvents((prev)=>[...data])\n        // });\n\n        try{\n          const fetchedEvents = await getEvents()\n          console.log('fetchedEvents',fetchedEvents)\n          const mappedEvents = fetchedEvents.map(fetchedEvent=>({...fetchedEvent, start_time: new Date(fetchedEvent.start), end_time: new Date(fetchedEvent.end)}))\n\n          console.log('mappedEvents',mappedEvents)\n          setEvents(()=>mappedEvents);\n        }catch(error){\n          console.log('error',error)\n        }\n    };\n\n  useEffect(() => {\n    loadEvents()\n  }, []);\n\n  const handleSelectSlot = (slotInfo: { start: Date; end: Date }) => {\n    setSlotInfo(slotInfo);\n    setShowCreateModal(true); // Show modal when a time slot is clicked\n  };\n\n  // Handle event selection for viewing and deleting\n  const handleSelectEvent = (event: CalendarEvent) => {\n    setSelectedEvent(event);\n    setShowModal(true); // Show modal when an event is clicked\n  };\n\n  // Handle event deletion inside modal\n  const handleDeleteEvent = async (eventId: string) => {\n    await deleteEvent(eventId);\n    setShowModal(false); // Close modal after deletion\n    loadEvents(); // Reload events after deleting\n  };\n\n  // Handle creating a new event from the modal\n  const handleCreateEvent = async (eventData: { title: string; start: Date; end: Date; description: string }) => {\n    await createEvent(eventData);\n    loadEvents(); // Reload events after creating a new one\n    setShowCreateModal(false); // Close the modal after creation\n  };\n\n  console.log('zzzz',events)\n\n  return (\n    <div>\n      <button onClick={()=>{\n        dispatch(logoutUser());\n      }}>Logout</button>\n        <BigCalendar\n            localizer={localizer}\n            events={events}\n            startAccessor=\"start\"\n            endAccessor=\"end\"\n            selectable\n            onSelectSlot={handleSelectSlot}\n            onSelectEvent={handleSelectEvent}\n            style={{ height: 500 }}\n        />\n\n      <ViewEventModal \n        show={showModal} \n        event={selectedEvent} \n        onClose={() => setShowModal(false)} \n        onDelete={handleDeleteEvent} \n      />\n      <CreateEventModal\n        show={showCreateModal}\n        onClose={() => setShowCreateModal(false)}\n        onCreate={handleCreateEvent}\n        slotInfo={slotInfo}\n      />\n    </div>\n  );\n};\n\nexport default CalendarPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}