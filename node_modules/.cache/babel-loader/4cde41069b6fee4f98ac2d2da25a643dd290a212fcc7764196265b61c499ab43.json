{"ast":null,"code":"import apiClient from \"./apiClient\";\n\n// Initial event list\nlet eventList = [{\n  id: \"1\",\n  title: \"Team Meeting\",\n  start: new Date(\"2024-09-20T09:00:00.000Z\"),\n  end: new Date(\"2024-09-20T10:00:00.000Z\"),\n  description: \"Discuss project status\",\n  organizationId: \"123\"\n}];\n\n// Fetch events (returns a promise that resolves the eventList)\nexport function fetchEvents() {\n  return new Promise(resolve => {\n    resolve(eventList);\n  });\n}\n\n// Create event (adds event to eventList and returns a resolved promise)\nexport function createEvent2(event) {\n  return new Promise(resolve => {\n    // Create a new event with a unique ID and add to the list\n\n    console.log('event', event);\n    const newEvent = {\n      ...event,\n      id: String(eventList.length + 1),\n      // Generate a new id\n      organizationId: \"123\" + 1 // Assuming you add organizationId manually\n    };\n    eventList.push(newEvent);\n    console.log('eventList', eventList);\n    resolve();\n  });\n}\n\n// Create event (adds event to eventList and returns a resolved promise)\nexport async function createEvent(event) {\n  const response = await apiClient.post('/events/', event);\n  return response.data;\n}\n\n// Delete event (removes the event from eventList based on eventId)\nexport function deleteEvent(eventId) {\n  return new Promise(resolve => {\n    eventList = eventList.filter(event => event.id !== eventId);\n    resolve();\n  });\n}\nexport async function getEvents() {\n  const response = await apiClient.get('/events/');\n  return response.data;\n}","map":{"version":3,"names":["apiClient","eventList","id","title","start","Date","end","description","organizationId","fetchEvents","Promise","resolve","createEvent2","event","console","log","newEvent","String","length","push","createEvent","response","post","data","deleteEvent","eventId","filter","getEvents","get"],"sources":["/Users/gylou/Documents/projects/calendar-event-app/src/api/event.ts"],"sourcesContent":["import { CalendarEvent, CalendarEventData } from \"../types\";\nimport apiClient from \"./apiClient\";\n\n// Initial event list\nlet eventList: CalendarEvent[] = [\n  {\n    id: \"1\",\n    title: \"Team Meeting\",\n    start: new Date(\"2024-09-20T09:00:00.000Z\"),\n    end: new Date(\"2024-09-20T10:00:00.000Z\"),\n    description: \"Discuss project status\",\n    organizationId: \"123\"\n  }\n];\n\n// Fetch events (returns a promise that resolves the eventList)\nexport function fetchEvents(): Promise<CalendarEvent[]> {\n  return new Promise((resolve) => {\n    resolve(eventList);\n  });\n}\n\n// Create event (adds event to eventList and returns a resolved promise)\nexport function createEvent2(event: Omit<CalendarEvent, 'id' | 'organizationId'>): Promise<void> {\n  return new Promise((resolve) => {\n    // Create a new event with a unique ID and add to the list\n\n    console.log('event',event)\n    const newEvent: CalendarEvent = {\n      ...event,\n      id: String(eventList.length + 1), // Generate a new id\n      organizationId: \"123\"+ 1 // Assuming you add organizationId manually\n    };\n    eventList.push(newEvent);\n    console.log('eventList',eventList)\n    resolve();\n  });\n}\n\n\n\n\n// Create event (adds event to eventList and returns a resolved promise)\nexport async function createEvent(event: CalendarEventData): Promise<void> {\n    const response = await apiClient.post('/events/', event);\n    return response.data;\n  }\n\n\n\n// Delete event (removes the event from eventList based on eventId)\nexport function deleteEvent(eventId: string): Promise<void> {\n  return new Promise((resolve) => {\n    eventList = eventList.filter((event) => event.id !== eventId);\n    resolve();\n  });\n}\n\nexport async function getEvents():Promise<CalendarEvent[]>{\n    const response = await apiClient.get('/events/');\n    return response.data;\n}"],"mappings":"AACA,OAAOA,SAAS,MAAM,aAAa;;AAEnC;AACA,IAAIC,SAA0B,GAAG,CAC/B;EACEC,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,cAAc;EACrBC,KAAK,EAAE,IAAIC,IAAI,CAAC,0BAA0B,CAAC;EAC3CC,GAAG,EAAE,IAAID,IAAI,CAAC,0BAA0B,CAAC;EACzCE,WAAW,EAAE,wBAAwB;EACrCC,cAAc,EAAE;AAClB,CAAC,CACF;;AAED;AACA,OAAO,SAASC,WAAWA,CAAA,EAA6B;EACtD,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9BA,OAAO,CAACV,SAAS,CAAC;EACpB,CAAC,CAAC;AACJ;;AAEA;AACA,OAAO,SAASW,YAAYA,CAACC,KAAmD,EAAiB;EAC/F,OAAO,IAAIH,OAAO,CAAEC,OAAO,IAAK;IAC9B;;IAEAG,OAAO,CAACC,GAAG,CAAC,OAAO,EAACF,KAAK,CAAC;IAC1B,MAAMG,QAAuB,GAAG;MAC9B,GAAGH,KAAK;MACRX,EAAE,EAAEe,MAAM,CAAChB,SAAS,CAACiB,MAAM,GAAG,CAAC,CAAC;MAAE;MAClCV,cAAc,EAAE,KAAK,GAAE,CAAC,CAAC;IAC3B,CAAC;IACDP,SAAS,CAACkB,IAAI,CAACH,QAAQ,CAAC;IACxBF,OAAO,CAACC,GAAG,CAAC,WAAW,EAACd,SAAS,CAAC;IAClCU,OAAO,CAAC,CAAC;EACX,CAAC,CAAC;AACJ;;AAKA;AACA,OAAO,eAAeS,WAAWA,CAACP,KAAwB,EAAiB;EACvE,MAAMQ,QAAQ,GAAG,MAAMrB,SAAS,CAACsB,IAAI,CAAC,UAAU,EAAET,KAAK,CAAC;EACxD,OAAOQ,QAAQ,CAACE,IAAI;AACtB;;AAIF;AACA,OAAO,SAASC,WAAWA,CAACC,OAAe,EAAiB;EAC1D,OAAO,IAAIf,OAAO,CAAEC,OAAO,IAAK;IAC9BV,SAAS,GAAGA,SAAS,CAACyB,MAAM,CAAEb,KAAK,IAAKA,KAAK,CAACX,EAAE,KAAKuB,OAAO,CAAC;IAC7Dd,OAAO,CAAC,CAAC;EACX,CAAC,CAAC;AACJ;AAEA,OAAO,eAAegB,SAASA,CAAA,EAA2B;EACtD,MAAMN,QAAQ,GAAG,MAAMrB,SAAS,CAAC4B,GAAG,CAAC,UAAU,CAAC;EAChD,OAAOP,QAAQ,CAACE,IAAI;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}