{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\n// Import ThunkAction\nimport rootReducer from './reducers';\n\n// Configure the Redux store using Redux Toolkit\nconst store = configureStore({\n  reducer: rootReducer,\n  devTools: process.env.NODE_ENV !== 'production' // Enable Redux DevTools in development mode only\n});\nexport default store;\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\n\n// Define a reusable AppThunk type to handle async actions","map":{"version":3,"names":["configureStore","rootReducer","store","reducer","devTools","process","env","NODE_ENV"],"sources":["/Users/macbookprom1/Projects/calendar-event-app/src/store.ts"],"sourcesContent":["import { configureStore, Action } from '@reduxjs/toolkit';\nimport { ThunkAction } from 'redux-thunk';  // Import ThunkAction\nimport rootReducer from './reducers';\n\n// Configure the Redux store using Redux Toolkit\nconst store = configureStore({\n  reducer: rootReducer,\n  devTools: process.env.NODE_ENV !== 'production', // Enable Redux DevTools in development mode only\n});\n\nexport default store;\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\n// Define a reusable AppThunk type to handle async actions\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n"],"mappings":"AAAA,SAASA,cAAc,QAAgB,kBAAkB;AACb;AAC5C,OAAOC,WAAW,MAAM,YAAY;;AAEpC;AACA,MAAMC,KAAK,GAAGF,cAAc,CAAC;EAC3BG,OAAO,EAAEF,WAAW;EACpBG,QAAQ,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,CAAE;AACnD,CAAC,CAAC;AAEF,eAAeL,KAAK;;AAEpB;;AAIA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}